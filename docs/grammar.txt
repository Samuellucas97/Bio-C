
<program> ::= <structs> <declarations> <functions> <main>

<structs> ::= [struct]
<struct> ::= "struct" ID <struct_block>          
<struct_block> ::= "{" <attributes>  "}"
<attributes> ::= [ <attribute> ";" ]
<atribute> ::= <extended_type> <square_brackets> ID 



<extended_type> ::= ID | TYPE


<declarations> ::= [ <declaration> ";" ] 
<declaration> ::= <var_declaration> | <var_assign> | <const_declaration>
<const_declaration> ::= "const" TYPE ID "=" LITERAL






<functions> ::= [ <function> ]
<function> ::= "def" ID "(" <params> ")" ":" <extended_type> <block>
<params> ::= [ <param> ]
<param> ::= <extended_type> <sb_param> ID
<sb_param> ::= "[" <sb_param_values> "]" | ""
<sb_param_values> ::= <sb_param_value> | <sb_param_value> "," <sb_param_values>
<sb_param_value> ::= "" | <expr>




<main> ::= "def" "main" "(" <main_args> ")" ":" INT_TYPE <block>
<main_args> ::= "" | <argc> "," <argv>
<argc> ::= INT_TYPE ID
<argv> :: STR_LIST_TYPE ID


------------
OK ATÃ‰ AQUI (sem argc e argv do main)
------------


<block> ::= "{" <statements> "}"
<statements> ::= [ <statement> ]
<statement> ::= <var_declaration> ";" | <var_assign> ";" | <condition> | <loop> | <function_call> ";" | <return_expr> ";"








<var_declaration> ::= <extended_type> <square_brackets> ID <opt_assign>
<opt_assign> ::= "" | <assign_type> <expr> | "=" <array_def>

<var_assign> ::= <extended_id> <assign_type> <expr> | 

<square_brackets> ::= "[" <square_bracket_values> "]" | ""
<square_brackets_values> ::= <expr> | <expr> "," <square_brackets_values>

*exemplos: int[2] arr1; int[3,9+2] arr2; float[getSize(y)] arr3;

<array_def> ::= "[" <elements> "]"
<elements> ::= <element> | <element> "," <elements>
<element> ::= <array_def> | <expr>

<assign_type> ::= "=" | "+=" | ...

<extended_id> ::= ID <square_brackets> <attribute_access>

<attribute_access> ::= "." <extended_id> | ""


*exemplo: node[2,3].left.left[3,3].a ;



<condition> ::= "if" "(" <expr> ")" <block> <opt_condition>
<opt_condition> ::= "else" {<condition> | <block>} | ""

------------
                  ||
FIZEMOS ISSO TBM  \/
------------

<loop> ::= "while" "(" <expr> ")" <block>

------------

FIZEMOS ISSO TBM  /\
                  ||
------------
<function_call> ::= ID "(" <opt_args> ")"
<opt_args> ::= "" | <args>
<args> ::= <expr> | <expr> "," <args>

<expr> ::= <un_operator> <expr> | <expr> <bin_operator> <expr> | "(" <expr> ")" | <simple_expr>
<simple_expr> := <extended_id> | LITERAL | <function_call>

<un_operator> ::= NOT_OPERATOR | NEG_OPERATOR 

<bin_operator> ::=  AND_OPERATOR | OR_OPERATOR | EQUALS_OPERATOR | GREATER_OPERATOR | LESS_OPERATOR | GREATER_EQUAL_OPERATOR | LESS_EQUAL_OPERATOR | DIFF_OPERATOR | SUM_OPERATOR | SUB_OPERATOR | DIV_OPERATOR | MULT_OPERATOR | MOD_OPERATOR | POW_OPERATOR